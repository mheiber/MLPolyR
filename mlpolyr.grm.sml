functor MLPolyRLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : MLPolyR_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
(*#line 1.2 "mlpolyr.grm"*)(* -*- sml-yacc -*-
 * mlpolyr.grm
 *
 *   The MLPolyR Grammar (for ML-Yacc).
 *
 * Copyright (c) 2005 by Matthias Blume (blume@tti-c.org)
 *)


(*#line 20.1 "mlpolyr.grm.sml"*)
end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\035\000\002\000\034\000\003\000\033\000\004\000\032\000\
\\007\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\018\000\027\000\019\000\026\000\021\000\025\000\023\000\024\000\
\\026\000\023\000\028\000\022\000\031\000\021\000\032\000\020\000\
\\033\000\019\000\034\000\018\000\035\000\073\000\036\000\017\000\
\\038\000\016\000\040\000\015\000\050\000\014\000\065\000\013\000\000\000\
\\001\000\001\000\035\000\002\000\034\000\003\000\033\000\004\000\032\000\
\\007\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\018\000\027\000\019\000\026\000\021\000\025\000\023\000\024\000\
\\026\000\023\000\028\000\022\000\031\000\021\000\032\000\020\000\
\\033\000\019\000\034\000\018\000\036\000\017\000\038\000\016\000\
\\040\000\015\000\050\000\014\000\065\000\013\000\000\000\
\\001\000\001\000\035\000\002\000\034\000\003\000\033\000\004\000\032\000\
\\010\000\030\000\011\000\029\000\023\000\024\000\034\000\018\000\
\\036\000\017\000\038\000\016\000\040\000\015\000\000\000\
\\001\000\001\000\058\000\003\000\057\000\000\000\
\\001\000\001\000\058\000\003\000\057\000\036\000\128\000\000\000\
\\001\000\001\000\068\000\003\000\057\000\064\000\067\000\000\000\
\\001\000\001\000\084\000\034\000\083\000\035\000\138\000\036\000\082\000\
\\038\000\081\000\063\000\080\000\065\000\079\000\000\000\
\\001\000\001\000\084\000\034\000\083\000\036\000\082\000\038\000\081\000\
\\040\000\175\000\063\000\080\000\065\000\079\000\000\000\
\\001\000\001\000\084\000\034\000\083\000\036\000\082\000\038\000\081\000\
\\063\000\080\000\065\000\079\000\000\000\
\\001\000\001\000\084\000\034\000\083\000\036\000\082\000\038\000\081\000\
\\063\000\080\000\065\000\234\000\000\000\
\\001\000\001\000\134\000\003\000\057\000\064\000\133\000\000\000\
\\001\000\001\000\151\000\000\000\
\\001\000\001\000\217\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\008\000\152\000\025\000\053\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\009\000\210\000\025\000\053\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\013\000\193\000\025\000\053\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\020\000\144\000\025\000\053\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\025\000\053\000\027\000\139\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\025\000\053\000\035\000\125\000\
\\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\
\\056\000\116\000\057\000\124\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\060\000\236\000\000\000\
\\001\000\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\060\000\242\000\000\000\
\\001\000\013\000\146\000\000\000\
\\001\000\014\000\204\000\000\000\
\\001\000\014\000\229\000\000\000\
\\001\000\021\000\206\000\000\000\
\\001\000\024\000\127\000\035\000\172\000\056\000\171\000\000\000\
\\001\000\024\000\127\000\048\000\200\000\000\000\
\\001\000\024\000\127\000\048\000\247\000\000\000\
\\001\000\024\000\127\000\054\000\126\000\000\000\
\\001\000\024\000\127\000\054\000\184\000\000\000\
\\001\000\024\000\127\000\061\000\145\000\000\000\
\\001\000\024\000\127\000\061\000\203\000\000\000\
\\001\000\024\000\127\000\061\000\224\000\000\000\
\\001\000\024\000\127\000\061\000\241\000\000\000\
\\001\000\024\000\127\000\061\000\251\000\000\000\
\\001\000\035\000\122\000\000\000\
\\001\000\035\000\123\000\000\000\
\\001\000\035\000\170\000\000\000\
\\001\000\036\000\017\000\038\000\016\000\000\000\
\\001\000\036\000\128\000\000\000\
\\001\000\037\000\028\001\039\000\028\001\054\000\097\001\056\000\028\001\000\000\
\\001\000\037\000\095\001\039\000\095\001\054\000\097\001\056\000\095\001\000\000\
\\001\000\037\000\121\000\000\000\
\\001\000\037\000\169\000\000\000\
\\001\000\037\000\194\000\000\000\
\\001\000\039\000\119\000\000\000\
\\001\000\039\000\166\000\000\000\
\\001\000\040\000\246\000\000\000\
\\001\000\041\000\115\000\000\000\
\\001\000\041\000\201\000\000\000\
\\001\000\041\000\248\000\000\000\
\\001\000\054\000\117\000\000\000\
\\001\000\054\000\120\000\000\000\
\\001\000\054\000\167\000\000\000\
\\001\000\054\000\209\000\000\000\
\\001\000\054\000\228\000\000\000\
\\001\000\061\000\213\000\000\000\
\\001\000\061\000\250\000\000\000\
\\001\000\062\000\176\000\000\000\
\\001\000\065\000\088\000\000\000\
\\001\000\067\000\000\000\000\000\
\\255\000\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\000\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\001\001\000\000\
\\002\001\016\000\188\000\000\000\
\\003\001\000\000\
\\004\001\020\000\186\000\000\000\
\\005\001\000\000\
\\006\001\000\000\
\\007\001\016\000\227\000\000\000\
\\008\001\000\000\
\\009\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\010\001\001\000\084\000\024\000\127\000\034\000\083\000\036\000\082\000\
\\038\000\081\000\063\000\080\000\065\000\079\000\000\000\
\\011\001\000\000\
\\012\001\000\000\
\\013\001\000\000\
\\014\001\000\000\
\\015\001\000\000\
\\016\001\000\000\
\\017\001\000\000\
\\018\001\000\000\
\\019\001\000\000\
\\020\001\000\000\
\\021\001\000\000\
\\022\001\024\000\127\000\056\000\171\000\000\000\
\\023\001\000\000\
\\024\001\001\000\134\000\003\000\057\000\064\000\133\000\000\000\
\\025\001\000\000\
\\026\001\056\000\165\000\000\000\
\\027\001\000\000\
\\029\001\024\000\127\000\000\000\
\\030\001\054\000\168\000\000\000\
\\031\001\024\000\127\000\000\000\
\\032\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\033\001\000\000\
\\034\001\015\000\094\000\017\000\093\000\000\000\
\\035\001\000\000\
\\036\001\000\000\
\\037\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\038\001\000\000\
\\039\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\040\001\000\000\
\\041\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\042\001\000\000\
\\043\001\000\000\
\\044\001\005\000\055\000\042\000\052\000\043\000\051\000\044\000\050\000\
\\045\000\049\000\046\000\048\000\047\000\047\000\048\000\046\000\
\\049\000\045\000\050\000\044\000\051\000\043\000\052\000\042\000\
\\053\000\041\000\000\000\
\\045\001\042\000\052\000\043\000\051\000\044\000\050\000\045\000\049\000\
\\046\000\048\000\047\000\047\000\048\000\046\000\049\000\045\000\
\\050\000\044\000\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\046\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\047\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\048\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\049\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\050\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\051\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\052\001\048\000\046\000\049\000\045\000\050\000\044\000\051\000\043\000\
\\052\000\042\000\053\000\041\000\000\000\
\\053\001\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\054\001\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\055\001\000\000\
\\056\001\000\000\
\\057\001\000\000\
\\058\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\059\001\001\000\035\000\002\000\034\000\003\000\033\000\004\000\032\000\
\\010\000\030\000\011\000\029\000\023\000\024\000\034\000\018\000\
\\036\000\017\000\038\000\016\000\040\000\015\000\000\000\
\\060\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\061\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\062\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\063\001\000\000\
\\064\001\055\000\040\000\058\000\039\000\066\000\038\000\000\000\
\\065\001\055\000\040\000\058\000\096\000\066\000\038\000\000\000\
\\066\001\055\000\040\000\058\000\096\000\066\000\038\000\000\000\
\\067\001\055\000\040\000\058\000\096\000\066\000\038\000\000\000\
\\068\001\055\000\040\000\058\000\096\000\066\000\038\000\000\000\
\\069\001\055\000\040\000\058\000\096\000\066\000\038\000\000\000\
\\070\001\000\000\
\\071\001\000\000\
\\072\001\000\000\
\\073\001\000\000\
\\073\001\059\000\154\000\000\000\
\\074\001\000\000\
\\075\001\000\000\
\\076\001\000\000\
\\077\001\000\000\
\\078\001\000\000\
\\079\001\000\000\
\\080\001\000\000\
\\081\001\000\000\
\\082\001\000\000\
\\083\001\000\000\
\\084\001\000\000\
\\085\001\000\000\
\\086\001\000\000\
\\087\001\000\000\
\\088\001\000\000\
\\089\001\000\000\
\\090\001\001\000\068\000\003\000\057\000\064\000\067\000\000\000\
\\091\001\000\000\
\\092\001\056\000\118\000\000\000\
\\093\001\000\000\
\\094\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\096\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\097\001\000\000\
\\098\001\000\000\
\\099\001\000\000\
\\100\001\001\000\035\000\002\000\034\000\003\000\033\000\004\000\032\000\
\\007\000\031\000\010\000\030\000\011\000\029\000\012\000\028\000\
\\018\000\027\000\019\000\026\000\021\000\025\000\023\000\024\000\
\\026\000\023\000\028\000\022\000\031\000\021\000\032\000\020\000\
\\033\000\019\000\034\000\018\000\036\000\017\000\038\000\016\000\
\\040\000\015\000\050\000\014\000\065\000\013\000\000\000\
\\101\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\056\000\116\000\000\000\
\\102\001\000\000\
\\103\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\056\000\116\000\000\000\
\\104\001\000\000\
\\105\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\057\000\124\000\000\000\
\\106\001\000\000\
\\107\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\057\000\124\000\000\000\
\\108\001\000\000\
\\109\001\000\000\
\\110\001\000\000\
\\111\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\112\001\060\000\142\000\000\000\
\\113\001\000\000\
\\114\001\005\000\055\000\006\000\054\000\025\000\053\000\029\000\223\000\
\\030\000\222\000\042\000\052\000\043\000\051\000\044\000\050\000\
\\045\000\049\000\046\000\048\000\047\000\047\000\048\000\046\000\
\\049\000\045\000\050\000\044\000\051\000\043\000\052\000\042\000\
\\053\000\041\000\000\000\
\\114\001\030\000\222\000\000\000\
\\115\001\000\000\
\\116\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\\117\001\060\000\240\000\000\000\
\\118\001\000\000\
\\119\001\000\000\
\\120\001\000\000\
\\121\001\022\000\141\000\000\000\
\\122\001\005\000\055\000\006\000\054\000\025\000\053\000\042\000\052\000\
\\043\000\051\000\044\000\050\000\045\000\049\000\046\000\048\000\
\\047\000\047\000\048\000\046\000\049\000\045\000\050\000\044\000\
\\051\000\043\000\052\000\042\000\053\000\041\000\000\000\
\"
val actionRowNumbers =
"\001\000\140\000\002\000\131\000\
\\120\000\137\000\125\000\132\000\
\\148\000\124\000\061\000\003\000\
\\002\000\161\000\152\000\152\000\
\\000\000\002\000\002\000\001\000\
\\008\000\001\000\149\000\059\000\
\\001\000\008\000\095\000\138\000\
\\139\000\001\000\141\000\171\000\
\\170\000\142\000\130\000\126\000\
\\003\000\003\000\003\000\001\000\
\\001\000\001\000\001\000\001\000\
\\001\000\001\000\001\000\001\000\
\\001\000\001\000\001\000\038\000\
\\001\000\001\000\160\000\159\000\
\\158\000\127\000\163\000\048\000\
\\162\000\051\000\154\000\153\000\
\\045\000\052\000\041\000\042\000\
\\035\000\036\000\018\000\143\000\
\\129\000\128\000\100\000\028\000\
\\083\000\039\000\074\000\086\000\
\\086\000\006\000\075\000\017\000\
\\183\000\173\000\003\000\016\000\
\\030\000\021\000\095\000\008\000\
\\011\000\013\000\003\000\136\000\
\\135\000\133\000\118\000\117\000\
\\116\000\115\000\114\000\113\000\
\\112\000\111\000\110\000\109\000\
\\108\000\107\000\104\000\105\000\
\\106\000\147\000\001\000\001\000\
\\005\000\151\000\001\000\150\000\
\\146\000\145\000\001\000\144\000\
\\001\000\008\000\086\000\088\000\
\\087\000\046\000\053\000\091\000\
\\040\000\043\000\037\000\025\000\
\\076\000\007\000\103\000\058\000\
\\059\000\008\000\001\000\001\000\
\\001\000\096\000\029\000\066\000\
\\064\000\008\000\001\000\134\000\
\\001\000\165\000\164\000\156\000\
\\155\000\157\000\167\000\166\000\
\\015\000\082\000\044\000\010\000\
\\080\000\008\000\008\000\079\000\
\\078\000\008\000\077\000\026\000\
\\099\000\049\000\001\000\174\000\
\\031\000\102\000\119\000\022\000\
\\169\000\168\000\001\000\094\000\
\\024\000\063\000\011\000\072\000\
\\054\000\014\000\121\000\001\000\
\\081\000\089\000\090\000\092\000\
\\085\000\084\000\008\000\056\000\
\\184\000\001\000\097\000\093\000\
\\012\000\065\000\073\000\001\000\
\\001\000\175\000\032\000\001\000\
\\172\000\067\000\069\000\055\000\
\\062\000\098\000\181\000\023\000\
\\059\000\009\000\001\000\019\000\
\\068\000\012\000\001\000\101\000\
\\177\000\176\000\179\000\033\000\
\\004\000\020\000\008\000\070\000\
\\071\000\182\000\009\000\001\000\
\\047\000\027\000\180\000\178\000\
\\050\000\008\000\057\000\034\000\
\\001\000\001\000\123\000\122\000\
\\060\000"
val gotoT =
"\
\\001\000\252\000\011\000\010\000\012\000\009\000\014\000\008\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\025\000\004\000\
\\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\014\000\008\000\022\000\007\000\023\000\034\000\024\000\005\000\
\\029\000\001\000\000\000\
\\000\000\
\\014\000\008\000\022\000\007\000\023\000\035\000\024\000\005\000\
\\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\054\000\000\000\
\\014\000\008\000\022\000\007\000\023\000\057\000\024\000\005\000\
\\029\000\001\000\000\000\
\\011\000\060\000\012\000\009\000\014\000\008\000\020\000\059\000\
\\021\000\058\000\022\000\007\000\023\000\006\000\024\000\005\000\
\\025\000\004\000\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\015\000\064\000\016\000\063\000\017\000\062\000\027\000\061\000\000\000\
\\015\000\067\000\016\000\063\000\017\000\062\000\027\000\061\000\000\000\
\\011\000\070\000\012\000\009\000\014\000\008\000\018\000\069\000\
\\021\000\068\000\022\000\007\000\023\000\006\000\024\000\005\000\
\\025\000\004\000\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\014\000\008\000\022\000\007\000\023\000\072\000\024\000\005\000\
\\029\000\001\000\000\000\
\\014\000\008\000\022\000\007\000\023\000\073\000\024\000\005\000\
\\029\000\001\000\000\000\
\\011\000\074\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\031\000\076\000\032\000\075\000\000\000\
\\011\000\083\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\037\000\085\000\038\000\084\000\000\000\
\\011\000\087\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\031\000\076\000\032\000\088\000\000\000\
\\009\000\090\000\010\000\089\000\000\000\
\\000\000\
\\000\000\
\\011\000\093\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\095\000\000\000\
\\027\000\096\000\000\000\
\\027\000\097\000\000\000\
\\011\000\098\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\099\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\100\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\101\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\102\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\103\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\104\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\105\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\106\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\107\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\108\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\109\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\014\000\110\000\000\000\
\\011\000\111\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\112\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\130\000\034\000\129\000\035\000\128\000\036\000\127\000\000\000\
\\027\000\130\000\034\000\133\000\035\000\128\000\036\000\127\000\000\000\
\\031\000\076\000\032\000\135\000\033\000\134\000\000\000\
\\000\000\
\\000\000\
\\042\000\138\000\000\000\
\\000\000\
\\027\000\141\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\009\000\090\000\010\000\145\000\000\000\
\\031\000\076\000\032\000\146\000\000\000\
\\002\000\148\000\003\000\147\000\000\000\
\\000\000\
\\027\000\151\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\154\000\012\000\009\000\014\000\008\000\021\000\153\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\025\000\004\000\
\\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\011\000\155\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\016\000\156\000\017\000\062\000\027\000\061\000\000\000\
\\000\000\
\\011\000\157\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\159\000\012\000\009\000\014\000\008\000\018\000\158\000\
\\022\000\007\000\023\000\006\000\024\000\005\000\025\000\004\000\
\\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\011\000\160\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\031\000\076\000\032\000\161\000\000\000\
\\027\000\130\000\034\000\162\000\035\000\128\000\036\000\127\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\013\000\172\000\031\000\076\000\032\000\171\000\000\000\
\\000\000\
\\000\000\
\\037\000\085\000\038\000\175\000\000\000\
\\031\000\076\000\032\000\176\000\000\000\
\\011\000\177\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\178\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\181\000\012\000\009\000\014\000\008\000\018\000\180\000\
\\019\000\179\000\022\000\007\000\023\000\006\000\024\000\005\000\
\\025\000\004\000\026\000\003\000\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\008\000\183\000\000\000\
\\004\000\185\000\000\000\
\\030\000\188\000\031\000\076\000\032\000\187\000\000\000\
\\011\000\189\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\011\000\190\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\027\000\130\000\035\000\193\000\036\000\127\000\000\000\
\\000\000\
\\031\000\076\000\032\000\194\000\000\000\
\\031\000\076\000\032\000\195\000\000\000\
\\000\000\
\\000\000\
\\031\000\076\000\032\000\197\000\033\000\196\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\200\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\203\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\002\000\148\000\003\000\205\000\000\000\
\\030\000\206\000\031\000\076\000\032\000\187\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\011\000\209\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\076\000\032\000\210\000\000\000\
\\000\000\
\\000\000\
\\011\000\212\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\005\000\214\000\006\000\213\000\000\000\
\\000\000\
\\000\000\
\\011\000\216\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\217\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\039\000\219\000\040\000\218\000\000\000\
\\000\000\
\\011\000\223\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\007\000\224\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\037\000\085\000\038\000\228\000\000\000\
\\031\000\076\000\032\000\231\000\037\000\230\000\041\000\229\000\000\000\
\\011\000\233\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\005\000\214\000\006\000\235\000\000\000\
\\011\000\236\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\040\000\237\000\000\000\
\\000\000\
\\000\000\
\\027\000\141\000\000\000\
\\000\000\
\\031\000\076\000\032\000\241\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\076\000\032\000\231\000\037\000\230\000\041\000\242\000\000\000\
\\011\000\243\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\031\000\076\000\032\000\247\000\000\000\
\\000\000\
\\000\000\
\\011\000\250\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\011\000\251\000\012\000\009\000\014\000\008\000\022\000\007\000\
\\023\000\006\000\024\000\005\000\025\000\004\000\026\000\003\000\
\\028\000\002\000\029\000\001\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 253
val numrules = 124
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit | STRING of unit ->  (string) | SMALLNUM of unit ->  (int) | NUMBER of unit ->  (Ast.integer) | NAME of unit ->  (Ast.symbol) | defaultmatch of unit ->  (Ast.exp option) | handling of unit ->  (Ast.mrule list*Ast.lambda option) | rehandling of unit ->  (Ast.mrule list) | handlers of unit ->  (Ast.mrule list*Ast.lambda option*Ast.mrule list) | mrlist of unit ->  (Ast.mrule list) | mr of unit ->  (Ast.mrule) | fieldpat of unit ->  (Ast.pat Ast.field) | fieldpatlist of unit ->  (Ast.pat Ast.field list) | rowpat of unit ->  (Ast.pat Ast.field list) | patlist of unit ->  (Ast.pat list) | pat of unit ->  (Ast.pat) | pat0 of unit ->  (Ast.pat) | formals of unit ->  (Ast.pat list) | number of unit ->  (LiteralData.integer) | con of unit ->  (Ast.mlabel) | label of unit ->  (Ast.mlabel) | appexp0 of unit ->  (Ast.exp) | appexp of unit ->  (Ast.exp) | selexp0 of unit ->  (Ast.exp) | selexp of unit ->  (Ast.exp) | atomicexp of unit ->  (Ast.exp) | explist' of unit ->  (Ast.exp list) | explistopt of unit ->  (Ast.exp list) | seqexp of unit ->  (Ast.exp) | expseq' of unit ->  (Ast.exp list) | fieldexp of unit ->  (Ast.exp Ast.field) | fieldexpseq of unit ->  (Ast.exp Ast.field list) | rowexp of unit ->  (Ast.exp Ast.field list) | recordexp of unit ->  (Purity.purity*Ast.exp Ast.field list) | dtmatch of unit ->  (Ast.dtmatch) | exp0 of unit ->  (Ast.exp) | exp of unit ->  (Ast.exp) | defs of unit ->  (Ast.def list) | def of unit ->  (Ast.def) | optrcl of unit ->  (Ast.reccases list) | morercl of unit ->  (Ast.reccases list) | rcl of unit ->  (Ast.reccases list) | rc of unit ->  (Ast.reccases) | morefunctions of unit ->  (Ast.function list) | functions of unit ->  (Ast.function list) | function of unit ->  (Ast.function) | program of unit ->  (Ast.program)
end
type svalue = MlyValue.svalue
type result = Ast.program
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn _ => false
val preferred_change : (term list * term list) list = 
nil
val noShift = 
fn (T 66) => true | _ => false
val showTerminal =
fn (T 0) => "NAME"
  | (T 1) => "NUMBER"
  | (T 2) => "SMALLNUM"
  | (T 3) => "STRING"
  | (T 4) => "KW_andalso"
  | (T 5) => "KW_orelse"
  | (T 6) => "KW_if"
  | (T 7) => "KW_then"
  | (T 8) => "KW_else"
  | (T 9) => "KW_false"
  | (T 10) => "KW_true"
  | (T 11) => "KW_let"
  | (T 12) => "KW_in"
  | (T 13) => "KW_end"
  | (T 14) => "KW_fun"
  | (T 15) => "KW_and"
  | (T 16) => "KW_val"
  | (T 17) => "KW_fn"
  | (T 18) => "KW_match"
  | (T 19) => "KW_with"
  | (T 20) => "KW_cases"
  | (T 21) => "KW_default"
  | (T 22) => "KW_nocases"
  | (T 23) => "KW_as"
  | (T 24) => "KW_where"
  | (T 25) => "KW_case"
  | (T 26) => "KW_of"
  | (T 27) => "KW_try"
  | (T 28) => "KW_handling"
  | (T 29) => "KW_rehandling"
  | (T 30) => "KW_raise"
  | (T 31) => "KW_isnull"
  | (T 32) => "KW_not"
  | (T 33) => "LP"
  | (T 34) => "RP"
  | (T 35) => "LCB"
  | (T 36) => "RCB"
  | (T 37) => "LCBB"
  | (T 38) => "RCBB"
  | (T 39) => "LSB"
  | (T 40) => "RSB"
  | (T 41) => "DEQ"
  | (T 42) => "LTEQ"
  | (T 43) => "LT"
  | (T 44) => "GTEQ"
  | (T 45) => "GT"
  | (T 46) => "NEQ"
  | (T 47) => "DCOLON"
  | (T 48) => "PLUS"
  | (T 49) => "MINUS"
  | (T 50) => "TIMES"
  | (T 51) => "DIV"
  | (T 52) => "MOD"
  | (T 53) => "EQ"
  | (T 54) => "DOT"
  | (T 55) => "COMMA"
  | (T 56) => "SEMI"
  | (T 57) => "EXCLAM"
  | (T 58) => "ASSIGN"
  | (T 59) => "BAR"
  | (T 60) => "DARROW"
  | (T 61) => "COLON"
  | (T 62) => "WILD"
  | (T 63) => "DOTDOTDOT"
  | (T 64) => "BQ"
  | (T 65) => "PLUSPLUS"
  | (T 66) => "EOF"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 66) $$ (T 65) $$ (T 64) $$ (T 63) $$ (T 62) $$ (T 61) $$ (T 60) $$ (T 59) $$ (T 58) $$ (T 57) $$ (T 56) $$ (T 55) $$ (T 54) $$ (T 53) $$ (T 52) $$ (T 51) $$ (T 50) $$ (T 49) $$ (T 48) $$ (T 47) $$ (T 46) $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39) $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32) $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25) $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18) $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11) $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.exp exp1, (expleft as exp1left), (expright as exp1right))) :: rest671)) => let val  result = MlyValue.program (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 106.4 "mlpolyr.grm"*)(exp, (expleft, expright))(*#line 912.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 0, ( result, exp1left, exp1right), rest671)
end
|  ( 1, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _ :: ( _, ( MlyValue.formals formals1, _, _)) :: ( _, ( MlyValue.NAME NAME1, (NAMEleft as NAME1left), _)) :: rest671)) => let val  result = MlyValue.function (fn _ => let val  (NAME as NAME1) = NAME1 ()
 val  (formals as formals1) = formals1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 109.4 "mlpolyr.grm"*)Ast.FUN (NAME, formals, exp, (NAMEleft, expright))(*#line 918.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 1, ( result, NAME1left, exp1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.morefunctions morefunctions1, _, morefunctions1right)) :: ( _, ( MlyValue.function function1, function1left, _)) :: rest671)) => let val  result = MlyValue.functions (fn _ => let val  (function as function1) = function1 ()
 val  (morefunctions as morefunctions1) = morefunctions1 ()
 in ((*#line 112.4 "mlpolyr.grm"*)function :: morefunctions(*#line 926.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 2, ( result, function1left, morefunctions1right), rest671)
end
|  ( 3, ( rest671)) => let val  result = MlyValue.morefunctions (fn _ => ((*#line 115.4 "mlpolyr.grm"*)[](*#line 933.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 3, ( result, defaultPos, defaultPos), rest671)
end
|  ( 4, ( ( _, ( MlyValue.functions functions1, _, functions1right)) :: ( _, ( _, KW_and1left, _)) :: rest671)) => let val  result = MlyValue.morefunctions (fn _ => let val  (functions as functions1) = functions1 ()
 in ((*#line 117.4 "mlpolyr.grm"*)functions(*#line 937.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 3, ( result, KW_and1left, functions1right), rest671)
end
|  ( 5, ( rest671)) => let val  result = MlyValue.optrcl (fn _ => ((*#line 120.4 "mlpolyr.grm"*)[](*#line 943.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 7, ( result, defaultPos, defaultPos), rest671)
end
|  ( 6, ( ( _, ( MlyValue.rcl rcl1, _, rcl1right)) :: _ :: ( _, ( _, KW_with1left, _)) :: rest671)) => let val  result = MlyValue.optrcl (fn _ => let val  (rcl as rcl1) = rcl1 ()
 in ((*#line 122.4 "mlpolyr.grm"*)rcl(*#line 947.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 7, ( result, KW_with1left, rcl1right), rest671)
end
|  ( 7, ( ( _, ( MlyValue.morercl morercl1, _, morercl1right)) :: ( _, ( MlyValue.rc rc1, rc1left, _)) :: rest671)) => let val  result = MlyValue.rcl (fn _ => let val  (rc as rc1) = rc1 ()
 val  (morercl as morercl1) = morercl1 ()
 in ((*#line 125.4 "mlpolyr.grm"*)rc :: morercl(*#line 953.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 5, ( result, rc1left, morercl1right), rest671)
end
|  ( 8, ( rest671)) => let val  result = MlyValue.morercl (fn _ => ((*#line 128.4 "mlpolyr.grm"*)[](*#line 960.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 6, ( result, defaultPos, defaultPos), rest671)
end
|  ( 9, ( ( _, ( MlyValue.rcl rcl1, _, rcl1right)) :: ( _, ( _, KW_and1left, _)) :: rest671)) => let val  result = MlyValue.morercl (fn _ => let val  (rcl as rcl1) = rcl1 ()
 in ((*#line 130.4 "mlpolyr.grm"*)rcl(*#line 964.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 6, ( result, KW_and1left, rcl1right), rest671)
end
|  ( 10, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _ :: ( _, ( MlyValue.NAME NAME1, (NAMEleft as NAME1left), _)) :: rest671)) => let val  result = MlyValue.rc (fn _ => let val  (NAME as NAME1) = NAME1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 133.18 "mlpolyr.grm"*)Ast.RC (NAME, exp, (NAMEleft, expright))(*#line 970.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 4, ( result, NAME1left, exp1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.pat pat1, pat1left, pat1right)) :: rest671)) => let val  result = MlyValue.formals (fn _ => let val  (pat as pat1) = pat1 ()
 in ((*#line 136.4 "mlpolyr.grm"*)[pat](*#line 977.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 29, ( result, pat1left, pat1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.formals formals1, _, formals1right)) :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.formals (fn _ => let val  (pat as pat1) = pat1 ()
 val  (formals as formals1) = formals1 ()
 in ((*#line 138.4 "mlpolyr.grm"*)pat :: formals(*#line 983.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 29, ( result, pat1left, formals1right), rest671)
end
|  ( 13, ( ( _, ( _, WILD1left, WILD1right)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => ((*#line 141.4 "mlpolyr.grm"*)Ast.WILDpat(*#line 990.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 30, ( result, WILD1left, WILD1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.NAME NAME1, NAME1left, NAME1right)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (NAME as NAME1) = NAME1 ()
 in ((*#line 143.4 "mlpolyr.grm"*)Ast.VARpat NAME(*#line 994.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, NAME1left, NAME1right), rest671)
end
|  ( 15, ( ( _, ( _, _, RP1right)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => ((*#line 145.4 "mlpolyr.grm"*)Ast.TUPLEpat [](*#line 1000.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 30, ( result, LP1left, RP1right), rest671)
end
|  ( 16, ( ( _, ( _, _, RP1right)) :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (pat as pat1) = pat1 ()
 in ((*#line 147.4 "mlpolyr.grm"*)pat(*#line 1004.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, LP1left, RP1right), rest671)
end
|  ( 17, ( ( _, ( _, _, RP1right)) :: ( _, ( MlyValue.patlist patlist1, _, _)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (patlist as patlist1) = patlist1 ()
 in ((*#line 149.4 "mlpolyr.grm"*)Ast.TUPLEpat patlist(*#line 1010.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, LP1left, RP1right), rest671)
end
|  ( 18, ( ( _, ( _, _, RCB1right)) :: ( _, ( MlyValue.rowpat rowpat1, _, _)) :: ( _, ( _, LCB1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (rowpat as rowpat1) = rowpat1 ()
 in ((*#line 151.4 "mlpolyr.grm"*)Ast.RECORDpat (Purity.Pure, rowpat)(*#line 1016.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, LCB1left, RCB1right), rest671)
end
|  ( 19, ( ( _, ( _, _, RCBB1right)) :: ( _, ( MlyValue.rowpat rowpat1, _, _)) :: ( _, ( _, LCBB1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (rowpat as rowpat1) = rowpat1 ()
 in ((*#line 153.4 "mlpolyr.grm"*)Ast.RECORDpat (Purity.Impure, rowpat)(*#line 1022.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, LCBB1left, RCBB1right), rest671)
end
|  ( 20, ( ( _, ( _, _, RCB1right)) :: ( _, ( MlyValue.rowpat rowpat1, _, _)) :: _ :: ( _, ( _, BQ1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  (rowpat as rowpat1) = rowpat1 ()
 in ((*#line 155.4 "mlpolyr.grm"*)Ast.MATCHpat rowpat(*#line 1028.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, BQ1left, RCB1right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.pat pat2, _, pat2right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.pat0 (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 in ((*#line 157.4 "mlpolyr.grm"*)Ast.ANDpat (pat1, pat2)(*#line 1034.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 30, ( result, pat1left, pat2right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.pat0 pat01, (pat0left as pat01left), (pat0right as pat01right))) :: rest671)) => let val  result = MlyValue.pat (fn _ => let val  (pat0 as pat01) = pat01 ()
 in ((*#line 160.4 "mlpolyr.grm"*)Ast.MARKpat (pat0, (pat0left, pat0right))(*#line 1041.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 31, ( result, pat01left, pat01right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.pat pat2, _, pat2right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.patlist (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 in ((*#line 163.4 "mlpolyr.grm"*)[pat1, pat2](*#line 1047.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 32, ( result, pat1left, pat2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.patlist patlist1, _, patlist1right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.patlist (fn _ => let val  (pat as pat1) = pat1 ()
 val  (patlist as patlist1) = patlist1 ()
 in ((*#line 165.4 "mlpolyr.grm"*)pat :: patlist(*#line 1054.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 32, ( result, pat1left, patlist1right), rest671)
end
|  ( 25, ( rest671)) => let val  result = MlyValue.rowpat (fn _ => ((*#line 168.4 "mlpolyr.grm"*)[](*#line 1061.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 33, ( result, defaultPos, defaultPos), rest671)
end
|  ( 26, ( ( _, ( MlyValue.fieldpatlist fieldpatlist1, fieldpatlist1left, fieldpatlist1right)) :: rest671)) => let val  result = MlyValue.rowpat (fn _ => let val  (fieldpatlist as fieldpatlist1) = fieldpatlist1 ()
 in ((*#line 170.4 "mlpolyr.grm"*)fieldpatlist(*#line 1065.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 33, ( result, fieldpatlist1left, fieldpatlist1right), rest671)
end
|  ( 27, ( ( _, ( MlyValue.fieldpat fieldpat1, fieldpat1left, fieldpat1right)) :: rest671)) => let val  result = MlyValue.fieldpatlist (fn _ => let val  (fieldpat as fieldpat1) = fieldpat1 ()
 in ((*#line 173.4 "mlpolyr.grm"*)[fieldpat](*#line 1071.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 34, ( result, fieldpat1left, fieldpat1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.fieldpatlist fieldpatlist1, _, fieldpatlist1right)) :: _ :: ( _, ( MlyValue.fieldpat fieldpat1, fieldpat1left, _)) :: rest671)) => let val  result = MlyValue.fieldpatlist (fn _ => let val  (fieldpat as fieldpat1) = fieldpat1 ()
 val  (fieldpatlist as fieldpatlist1) = fieldpatlist1 ()
 in ((*#line 175.4 "mlpolyr.grm"*)fieldpat :: fieldpatlist(*#line 1077.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 34, ( result, fieldpat1left, fieldpatlist1right), rest671)
end
|  ( 29, ( ( _, ( MlyValue.NAME NAME1, (NAMEleft as NAME1left), (NAMEright as NAME1right))) :: rest671)) => let val  result = MlyValue.fieldpat (fn _ => let val  (NAME as NAME1) = NAME1 ()
 in ((*#line 178.4 "mlpolyr.grm"*)(SOME (RecordLabel.SYMlab NAME, (NAMEleft, NAMEright)),
		  Ast.VARpat NAME)(*#line 1084.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 35, ( result, NAME1left, NAME1right), rest671)
end
|  ( 30, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: _ :: ( _, ( MlyValue.label label1, label1left, _)) :: rest671)) => let val  result = MlyValue.fieldpat (fn _ => let val  (label as label1) = label1 ()
 val  (pat as pat1) = pat1 ()
 in ((*#line 181.4 "mlpolyr.grm"*)(SOME label, pat)(*#line 1091.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 35, ( result, label1left, pat1right), rest671)
end
|  ( 31, ( ( _, ( _, DOTDOTDOT1left, DOTDOTDOT1right)) :: rest671)) => let val  result = MlyValue.fieldpat (fn _ => ((*#line 183.4 "mlpolyr.grm"*)(NONE, Ast.WILDpat)(*#line 1098.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 35, ( result, DOTDOTDOT1left, DOTDOTDOT1right), rest671)
end
|  ( 32, ( ( _, ( MlyValue.pat pat1, _, pat1right)) :: _ :: ( _, ( _, DOTDOTDOT1left, _)) :: rest671)) => let val  result = MlyValue.fieldpat (fn _ => let val  (pat as pat1) = pat1 ()
 in ((*#line 185.4 "mlpolyr.grm"*)(NONE, pat)(*#line 1102.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 35, ( result, DOTDOTDOT1left, pat1right), rest671)
end
|  ( 33, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, KW_val1left, _)) :: rest671)) => let val  result = MlyValue.def (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 188.4 "mlpolyr.grm"*)Ast.VALdef (pat, exp)(*#line 1108.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 8, ( result, KW_val1left, exp1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.optrcl optrcl1, _, optrcl1right)) :: ( _, ( MlyValue.functions functions1, _, functionsright)) :: ( _, ( _, (KW_funleft as KW_fun1left), _)) :: rest671)) => let val  result = MlyValue.def (fn _ => let val  (functions as functions1) = functions1 ()
 val  (optrcl as optrcl1) = optrcl1 ()
 in ((*#line 190.4 "mlpolyr.grm"*)Ast.FUNdef (functions, optrcl, (KW_funleft, functionsright))(*#line 1115.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 8, ( result, KW_fun1left, optrcl1right), rest671)
end
|  ( 35, ( rest671)) => let val  result = MlyValue.defs (fn _ => ((*#line 193.4 "mlpolyr.grm"*)[](*#line 1122.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 9, ( result, defaultPos, defaultPos), rest671)
end
|  ( 36, ( ( _, ( MlyValue.defs defs1, _, defs1right)) :: ( _, ( MlyValue.def def1, def1left, _)) :: rest671)) => let val  result = MlyValue.defs (fn _ => let val  (def as def1) = def1 ()
 val  (defs as defs1) = defs1 ()
 in ((*#line 195.4 "mlpolyr.grm"*)def :: defs(*#line 1126.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 9, ( result, def1left, defs1right), rest671)
end
|  ( 37, ( ( _, ( _, _, KW_end1right)) :: ( _, ( MlyValue.seqexp seqexp1, _, _)) :: _ :: ( _, ( MlyValue.defs defs1, _, _)) :: ( _, ( _, KW_let1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (defs as defs1) = defs1 ()
 val  (seqexp as seqexp1) = seqexp1 ()
 in ((*#line 198.4 "mlpolyr.grm"*)Ast.LETexp (defs, seqexp)(*#line 1133.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_let1left, KW_end1right), rest671)
end
|  ( 38, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, KW_if1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in ((*#line 200.4 "mlpolyr.grm"*)Ast.IFexp (exp1, exp2, exp3)(*#line 1140.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_if1left, exp3right), rest671)
end
|  ( 39, ( ( _, ( MlyValue.dtmatch dtmatch1, _, dtmatch1right)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, KW_case1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (dtmatch as dtmatch1) = dtmatch1 ()
 in ((*#line 202.4 "mlpolyr.grm"*)Ast.CASEexp (exp, dtmatch)(*#line 1148.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_case1left, dtmatch1right), rest671)
end
|  ( 40, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, KW_raise1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 204.4 "mlpolyr.grm"*)Ast.RAISEexp exp(*#line 1155.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_raise1left, exp1right), rest671)
end
|  ( 41, ( ( _, ( _, _, KW_end1right)) :: ( _, ( MlyValue.handlers handlers1, _, _)) :: ( _, ( MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, KW_try1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (pat as pat1) = pat1 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  (handlers as handlers1) = handlers1 ()
 in ((*#line 206.4 "mlpolyr.grm"*)Ast.TRYexp { scrutinee = exp1,
			      success = (pat, exp2),
			      handling = #1 handlers,
			      catchall = #2 handlers,
			      rehandling = #3 handlers }(*#line 1161.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_try1left, KW_end1right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, KW_match1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 212.4 "mlpolyr.grm"*)Ast.PSCASEexp (exp1, exp2)(*#line 1174.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_match1left, exp2right), rest671)
end
|  ( 43, ( ( _, ( MlyValue.defaultmatch defaultmatch1, _, defaultmatch1right)) :: ( _, ( MlyValue.mrlist mrlist1, _, _)) :: ( _, ( _, KW_cases1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (mrlist as mrlist1) = mrlist1 ()
 val  (defaultmatch as defaultmatch1) = defaultmatch1 ()
 in ((*#line 214.4 "mlpolyr.grm"*)Ast.MATCHexp (mrlist, defaultmatch)(*#line 1181.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_cases1left, defaultmatch1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.recordexp recordexp1, _, recordexp1right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (exp as exp1) = exp1 ()
 val  (recordexp as recordexp1) = recordexp1 ()
 in ((*#line 216.4 "mlpolyr.grm"*)Ast.WHEREexp (#1 recordexp, exp, #2 recordexp)(*#line 1188.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, recordexp1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 218.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.BOOLCONN Ast.ORELSE, exp1, exp2)(*#line 1195.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 46, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 220.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.BOOLCONN Ast.ANDALSO, exp1, exp2)(*#line 1202.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 47, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 222.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.EQ, exp1, exp2)(*#line 1209.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 48, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 224.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.LTEQ, exp1, exp2)(*#line 1216.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 49, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 226.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.LT, exp1, exp2)(*#line 1223.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 50, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 228.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.GTEQ, exp1, exp2)(*#line 1230.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 51, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 230.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.GT, exp1, exp2)(*#line 1237.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 232.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CMP Oper.NEQ, exp1, exp2)(*#line 1244.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 53, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 234.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.CONS, exp1, exp2)(*#line 1251.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 54, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 236.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.ARITH Oper.PLUS, exp1, exp2)(*#line 1258.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 55, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 238.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.ARITH Oper.MINUS, exp1, exp2)(*#line 1265.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 56, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 240.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.ARITH Oper.TIMES, exp1, exp2)(*#line 1272.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 57, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 242.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.ARITH Oper.DIV, exp1, exp2)(*#line 1279.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 58, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 244.4 "mlpolyr.grm"*)Ast.BINOPexp (Ast.ARITH Oper.MOD, exp1, exp2)(*#line 1286.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, exp1left, exp2right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( _, KW_fn1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 246.4 "mlpolyr.grm"*)Ast.FNexp (pat, exp)(*#line 1293.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, KW_fn1left, exp1right), rest671)
end
|  ( 60, ( ( _, ( MlyValue.appexp appexp1, appexp1left, appexp1right)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (appexp as appexp1) = appexp1 ()
 in ((*#line 248.4 "mlpolyr.grm"*)appexp(*#line 1300.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, appexp1left, appexp1right), rest671)
end
|  ( 61, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.label label1, _, _)) :: _ :: ( _, ( MlyValue.selexp selexp1, selexp1left, _)) :: rest671)) => let val  result = MlyValue.exp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 val  (label as label1) = label1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 250.4 "mlpolyr.grm"*)Ast.ASSIGNexp (selexp, label, exp)(*#line 1306.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 11, ( result, selexp1left, exp1right), rest671)
end
|  ( 62, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.pat pat2, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: _ :: ( _, ( _, LSB1left, _)) :: rest671)) => let val  result = MlyValue.dtmatch (fn _ => let val  exp1 = exp1 ()
 val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 val  exp2 = exp2 ()
 in ((*#line 253.4 "mlpolyr.grm"*){ nilcase = exp1, conscase = (pat1, pat2, exp2) }(*#line 1314.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 12, ( result, LSB1left, exp2right), rest671)
end
|  ( 63, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: _ :: _ :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.pat pat2, _, _)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.dtmatch (fn _ => let val  pat1 = pat1 ()
 val  pat2 = pat2 ()
 val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 255.4 "mlpolyr.grm"*){ nilcase = exp2, conscase = (pat1, pat2, exp1) }(*#line 1323.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 12, ( result, pat1left, exp2right), rest671)
end
|  ( 64, ( ( _, ( MlyValue.exp0 exp01, (exp0left as exp01left), (exp0right as exp01right))) :: rest671)) => let val  result = MlyValue.exp (fn _ => let val  (exp0 as exp01) = exp01 ()
 in ((*#line 258.4 "mlpolyr.grm"*)Ast.MARKexp (exp0, (exp0left, exp0right))(*#line 1332.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 10, ( result, exp01left, exp01right), rest671)
end
|  ( 65, ( ( _, ( MlyValue.selexp selexp1, selexp1left, selexp1right)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 in ((*#line 261.4 "mlpolyr.grm"*)selexp(*#line 1338.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, selexp1left, selexp1right), rest671)
end
|  ( 66, ( ( _, ( MlyValue.selexp selexp1, _, selexp1right)) :: ( _, ( MlyValue.appexp appexp1, appexp1left, _)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (appexp as appexp1) = appexp1 ()
 val  (selexp as selexp1) = selexp1 ()
 in ((*#line 263.4 "mlpolyr.grm"*)Ast.APPexp (appexp, selexp)(*#line 1344.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, appexp1left, selexp1right), rest671)
end
|  ( 67, ( ( _, ( MlyValue.selexp selexp1, _, selexp1right)) :: ( _, ( _, MINUS1left, _)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 in ((*#line 265.4 "mlpolyr.grm"*)Ast.UOPexp (Ast.UMINUS, selexp)(*#line 1351.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, MINUS1left, selexp1right), rest671)
end
|  ( 68, ( ( _, ( MlyValue.selexp selexp1, _, selexp1right)) :: ( _, ( _, KW_isnull1left, _)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 in ((*#line 267.4 "mlpolyr.grm"*)Ast.UOPexp (Ast.ISNULL, selexp)(*#line 1357.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, KW_isnull1left, selexp1right), rest671)
end
|  ( 69, ( ( _, ( MlyValue.selexp selexp1, _, selexp1right)) :: ( _, ( _, KW_not1left, _)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 in ((*#line 269.4 "mlpolyr.grm"*)Ast.UOPexp (Ast.NOT, selexp)(*#line 1363.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, KW_not1left, selexp1right), rest671)
end
|  ( 70, ( ( _, ( MlyValue.selexp selexp1, _, selexp1right)) :: ( _, ( MlyValue.con con1, con1left, _)) :: rest671)) => let val  result = MlyValue.appexp0 (fn _ => let val  (con as con1) = con1 ()
 val  (selexp as selexp1) = selexp1 ()
 in ((*#line 271.4 "mlpolyr.grm"*)Ast.CONexp (con, selexp)(*#line 1369.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 25, ( result, con1left, selexp1right), rest671)
end
|  ( 71, ( ( _, ( MlyValue.appexp0 appexp01, (appexp0left as appexp01left), (appexp0right as appexp01right))) :: rest671)) => let val  result = MlyValue.appexp (fn _ => let val  (appexp0 as appexp01) = appexp01 ()
 in ((*#line 274.4 "mlpolyr.grm"*)Ast.MARKexp (appexp0, (appexp0left, appexp0right))(*#line 1376.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 24, ( result, appexp01left, appexp01right), rest671)
end
|  ( 72, ( ( _, ( MlyValue.atomicexp atomicexp1, atomicexp1left, atomicexp1right)) :: rest671)) => let val  result = MlyValue.selexp0 (fn _ => let val  (atomicexp as atomicexp1) = atomicexp1 ()
 in ((*#line 277.4 "mlpolyr.grm"*)atomicexp(*#line 1382.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 23, ( result, atomicexp1left, atomicexp1right), rest671)
end
|  ( 73, ( ( _, ( MlyValue.label label1, _, label1right)) :: _ :: ( _, ( MlyValue.selexp selexp1, selexp1left, _)) :: rest671)) => let val  result = MlyValue.selexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 val  (label as label1) = label1 ()
 in ((*#line 279.4 "mlpolyr.grm"*)Ast.SELexp (Purity.Pure, selexp, label)(*#line 1388.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 23, ( result, selexp1left, label1right), rest671)
end
|  ( 74, ( ( _, ( MlyValue.label label1, _, label1right)) :: _ :: ( _, ( MlyValue.selexp selexp1, selexp1left, _)) :: rest671)) => let val  result = MlyValue.selexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 val  (label as label1) = label1 ()
 in ((*#line 281.4 "mlpolyr.grm"*)Ast.SELexp (Purity.Impure, selexp, label)(*#line 1395.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 23, ( result, selexp1left, label1right), rest671)
end
|  ( 75, ( ( _, ( MlyValue.label label1, _, label1right)) :: _ :: ( _, ( MlyValue.selexp selexp1, selexp1left, _)) :: rest671)) => let val  result = MlyValue.selexp0 (fn _ => let val  (selexp as selexp1) = selexp1 ()
 val  (label as label1) = label1 ()
 in ((*#line 283.4 "mlpolyr.grm"*)Ast.SWIDENexp (selexp, label)(*#line 1402.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 23, ( result, selexp1left, label1right), rest671)
end
|  ( 76, ( ( _, ( MlyValue.selexp0 selexp01, (selexp0left as selexp01left), (selexp0right as selexp01right))) :: rest671)) => let val  result = MlyValue.selexp (fn _ => let val  (selexp0 as selexp01) = selexp01 ()
 in ((*#line 286.4 "mlpolyr.grm"*)Ast.MARKexp (selexp0, (selexp0left, selexp0right))(*#line 1409.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 22, ( result, selexp01left, selexp01right), rest671)
end
|  ( 77, ( ( _, ( _, KW_true1left, KW_true1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => ((*#line 289.4 "mlpolyr.grm"*)Ast.BOOLexp true(*#line 1415.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 21, ( result, KW_true1left, KW_true1right), rest671)
end
|  ( 78, ( ( _, ( _, KW_false1left, KW_false1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => ((*#line 291.4 "mlpolyr.grm"*)Ast.BOOLexp false(*#line 1419.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 21, ( result, KW_false1left, KW_false1right), rest671)
end
|  ( 79, ( ( _, ( MlyValue.number number1, number1left, number1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (number as number1) = number1 ()
 in ((*#line 293.4 "mlpolyr.grm"*)Ast.NUMBERexp number(*#line 1423.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, number1left, number1right), rest671)
end
|  ( 80, ( ( _, ( MlyValue.STRING STRING1, STRING1left, STRING1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (STRING as STRING1) = STRING1 ()
 in ((*#line 295.4 "mlpolyr.grm"*)Ast.STRINGexp STRING(*#line 1429.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, STRING1left, STRING1right), rest671)
end
|  ( 81, ( ( _, ( MlyValue.NAME NAME1, NAME1left, NAME1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (NAME as NAME1) = NAME1 ()
 in ((*#line 297.4 "mlpolyr.grm"*)Ast.VARexp NAME(*#line 1435.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, NAME1left, NAME1right), rest671)
end
|  ( 82, ( ( _, ( _, _, RP1right)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => ((*#line 299.4 "mlpolyr.grm"*)Ast.SEQexp [](*#line 1441.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 21, ( result, LP1left, RP1right), rest671)
end
|  ( 83, ( ( _, ( _, _, RP1right)) :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 301.4 "mlpolyr.grm"*)exp(*#line 1445.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, LP1left, RP1right), rest671)
end
|  ( 84, ( ( _, ( _, _, RP1right)) :: ( _, ( MlyValue.expseq' expseq'1, _, _)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (expseq' as expseq'1) = expseq'1 ()
 in ((*#line 303.4 "mlpolyr.grm"*)Ast.SEQexp expseq'(*#line 1451.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, LP1left, RP1right), rest671)
end
|  ( 85, ( ( _, ( _, _, RP1right)) :: ( _, ( MlyValue.explist' explist'1, _, _)) :: ( _, ( _, LP1left, _)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (explist' as explist'1) = explist'1 ()
 in ((*#line 305.4 "mlpolyr.grm"*)Ast.TUPLEexp explist'(*#line 1457.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, LP1left, RP1right), rest671)
end
|  ( 86, ( ( _, ( _, _, RSB1right)) :: ( _, ( MlyValue.explistopt explistopt1, _, _)) :: ( _, ( _, LSB1left, _)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (explistopt as explistopt1) = explistopt1 ()
 in ((*#line 307.4 "mlpolyr.grm"*)Ast.LISTexp explistopt(*#line 1463.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, LSB1left, RSB1right), rest671)
end
|  ( 87, ( ( _, ( MlyValue.recordexp recordexp1, recordexp1left, recordexp1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => let val  (recordexp as recordexp1) = recordexp1 ()
 in ((*#line 309.4 "mlpolyr.grm"*)Ast.RECORDexp recordexp(*#line 1469.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 21, ( result, recordexp1left, recordexp1right), rest671)
end
|  ( 88, ( ( _, ( _, KW_nocases1left, KW_nocases1right)) :: rest671)) => let val  result = MlyValue.atomicexp (fn _ => ((*#line 311.4 "mlpolyr.grm"*)Ast.MATCHexp ([], NONE)(*#line 1475.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 21, ( result, KW_nocases1left, KW_nocases1right), rest671)
end
|  ( 89, ( ( _, ( _, _, RCB1right)) :: ( _, ( MlyValue.rowexp rowexp1, _, _)) :: ( _, ( _, LCB1left, _)) :: rest671)) => let val  result = MlyValue.recordexp (fn _ => let val  (rowexp as rowexp1) = rowexp1 ()
 in ((*#line 314.4 "mlpolyr.grm"*)Purity.Pure, rowexp(*#line 1479.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 13, ( result, LCB1left, RCB1right), rest671)
end
|  ( 90, ( ( _, ( _, _, RCBB1right)) :: ( _, ( MlyValue.rowexp rowexp1, _, _)) :: ( _, ( _, LCBB1left, _)) :: rest671)) => let val  result = MlyValue.recordexp (fn _ => let val  (rowexp as rowexp1) = rowexp1 ()
 in ((*#line 316.4 "mlpolyr.grm"*)Purity.Impure, rowexp(*#line 1485.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 13, ( result, LCBB1left, RCBB1right), rest671)
end
|  ( 91, ( rest671)) => let val  result = MlyValue.rowexp (fn _ => ((*#line 319.4 "mlpolyr.grm"*)[](*#line 1491.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 14, ( result, defaultPos, defaultPos), rest671)
end
|  ( 92, ( ( _, ( MlyValue.fieldexpseq fieldexpseq1, fieldexpseq1left, fieldexpseq1right)) :: rest671)) => let val  result = MlyValue.rowexp (fn _ => let val  (fieldexpseq as fieldexpseq1) = fieldexpseq1 ()
 in ((*#line 321.4 "mlpolyr.grm"*)fieldexpseq(*#line 1495.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 14, ( result, fieldexpseq1left, fieldexpseq1right), rest671)
end
|  ( 93, ( ( _, ( MlyValue.fieldexp fieldexp1, fieldexp1left, fieldexp1right)) :: rest671)) => let val  result = MlyValue.fieldexpseq (fn _ => let val  (fieldexp as fieldexp1) = fieldexp1 ()
 in ((*#line 324.4 "mlpolyr.grm"*)[fieldexp](*#line 1501.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 15, ( result, fieldexp1left, fieldexp1right), rest671)
end
|  ( 94, ( ( _, ( MlyValue.fieldexpseq fieldexpseq1, _, fieldexpseq1right)) :: _ :: ( _, ( MlyValue.fieldexp fieldexp1, fieldexp1left, _)) :: rest671)) => let val  result = MlyValue.fieldexpseq (fn _ => let val  (fieldexp as fieldexp1) = fieldexp1 ()
 val  (fieldexpseq as fieldexpseq1) = fieldexpseq1 ()
 in ((*#line 326.4 "mlpolyr.grm"*)fieldexp :: fieldexpseq(*#line 1507.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 15, ( result, fieldexp1left, fieldexpseq1right), rest671)
end
|  ( 95, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.label label1, label1left, _)) :: rest671)) => let val  result = MlyValue.fieldexp (fn _ => let val  (label as label1) = label1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 329.4 "mlpolyr.grm"*)(SOME label, exp)(*#line 1514.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 16, ( result, label1left, exp1right), rest671)
end
|  ( 96, ( ( _, ( MlyValue.NAME NAME1, (NAMEleft as NAME1left), (NAMEright as NAME1right))) :: rest671)) => let val  result = MlyValue.fieldexp (fn _ => let val  (NAME as NAME1) = NAME1 ()
 in ((*#line 331.4 "mlpolyr.grm"*)(SOME (RecordLabel.SYMlab NAME, (NAMEleft, NAMEright)),
		  Ast.VARexp NAME)(*#line 1521.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 16, ( result, NAME1left, NAME1right), rest671)
end
|  ( 97, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( _, DOTDOTDOT1left, _)) :: rest671)) => let val  result = MlyValue.fieldexp (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 334.4 "mlpolyr.grm"*)(NONE, exp)(*#line 1528.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 16, ( result, DOTDOTDOT1left, exp1right), rest671)
end
|  ( 98, ( ( _, ( MlyValue.NAME NAME1, (NAMEleft as NAME1left), (NAMEright as NAME1right))) :: rest671)) => let val  result = MlyValue.label (fn _ => let val  (NAME as NAME1) = NAME1 ()
 in ((*#line 337.4 "mlpolyr.grm"*)RecordLabel.SYMlab NAME, (NAMEleft, NAMEright)(*#line 1534.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 26, ( result, NAME1left, NAME1right), rest671)
end
|  ( 99, ( ( _, ( MlyValue.SMALLNUM SMALLNUM1, (SMALLNUMleft as SMALLNUM1left), (SMALLNUMright as SMALLNUM1right))) :: rest671)) => let val  result = MlyValue.label (fn _ => let val  (SMALLNUM as SMALLNUM1) = SMALLNUM1 ()
 in ((*#line 339.4 "mlpolyr.grm"*)RecordLabel.NUMlab SMALLNUM, (SMALLNUMleft, SMALLNUMright)(*#line 1540.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 26, ( result, SMALLNUM1left, SMALLNUM1right), rest671)
end
|  ( 100, ( ( _, ( MlyValue.label label1, _, label1right)) :: ( _, ( _, BQ1left, _)) :: rest671)) => let val  result = MlyValue.con (fn _ => let val  (label as label1) = label1 ()
 in ((*#line 342.4 "mlpolyr.grm"*)label(*#line 1546.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 27, ( result, BQ1left, label1right), rest671)
end
|  ( 101, ( rest671)) => let val  result = MlyValue.explistopt (fn _ => ((*#line 345.4 "mlpolyr.grm"*)[](*#line 1552.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 19, ( result, defaultPos, defaultPos), rest671)
end
|  ( 102, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)) => let val  result = MlyValue.explistopt (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 347.4 "mlpolyr.grm"*)[exp](*#line 1556.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 19, ( result, exp1left, exp1right), rest671)
end
|  ( 103, ( ( _, ( MlyValue.explist' explist'1, explist'1left, explist'1right)) :: rest671)) => let val  result = MlyValue.explistopt (fn _ => let val  (explist' as explist'1) = explist'1 ()
 in ((*#line 349.4 "mlpolyr.grm"*)explist'(*#line 1562.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 19, ( result, explist'1left, explist'1right), rest671)
end
|  ( 104, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.explist' (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 352.4 "mlpolyr.grm"*)[exp1, exp2](*#line 1568.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 20, ( result, exp1left, exp2right), rest671)
end
|  ( 105, ( ( _, ( MlyValue.explist' explist'1, _, explist'1right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.explist' (fn _ => let val  (exp as exp1) = exp1 ()
 val  (explist' as explist'1) = explist'1 ()
 in ((*#line 354.4 "mlpolyr.grm"*)exp :: explist'(*#line 1575.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 20, ( result, exp1left, explist'1right), rest671)
end
|  ( 106, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.expseq' (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ((*#line 357.4 "mlpolyr.grm"*)[exp1, exp2](*#line 1582.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 17, ( result, exp1left, exp2right), rest671)
end
|  ( 107, ( ( _, ( MlyValue.expseq' expseq'1, _, expseq'1right)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = MlyValue.expseq' (fn _ => let val  (exp as exp1) = exp1 ()
 val  (expseq' as expseq'1) = expseq'1 ()
 in ((*#line 359.4 "mlpolyr.grm"*)exp :: expseq'(*#line 1589.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 17, ( result, exp1left, expseq'1right), rest671)
end
|  ( 108, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)) => let val  result = MlyValue.seqexp (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 362.4 "mlpolyr.grm"*)exp(*#line 1596.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 18, ( result, exp1left, exp1right), rest671)
end
|  ( 109, ( ( _, ( MlyValue.expseq' expseq'1, expseq'1left, expseq'1right)) :: rest671)) => let val  result = MlyValue.seqexp (fn _ => let val  (expseq' as expseq'1) = expseq'1 ()
 in ((*#line 364.4 "mlpolyr.grm"*)Ast.SEQexp expseq'(*#line 1602.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 18, ( result, expseq'1left, expseq'1right), rest671)
end
|  ( 110, ( ( _, ( MlyValue.NUMBER NUMBER1, NUMBER1left, NUMBER1right)) :: rest671)) => let val  result = MlyValue.number (fn _ => let val  (NUMBER as NUMBER1) = NUMBER1 ()
 in ((*#line 367.4 "mlpolyr.grm"*)NUMBER * 2(*#line 1608.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 28, ( result, NUMBER1left, NUMBER1right), rest671)
end
|  ( 111, ( ( _, ( MlyValue.SMALLNUM SMALLNUM1, SMALLNUM1left, SMALLNUM1right)) :: rest671)) => let val  result = MlyValue.number (fn _ => let val  (SMALLNUM as SMALLNUM1) = SMALLNUM1 ()
 in ((*#line 369.4 "mlpolyr.grm"*)LiteralData.fromInt SMALLNUM * 2(*#line 1614.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 28, ( result, SMALLNUM1left, SMALLNUM1right), rest671)
end
|  ( 112, ( ( _, ( MlyValue.exp exp1, _, (expright as exp1right))) :: _ :: ( _, ( MlyValue.pat pat1, _, _)) :: ( _, ( MlyValue.label label1, _, _)) :: ( _, ( _, (BQleft as BQ1left), _)) :: rest671)) => let val  result = MlyValue.mr (fn _ => let val  (label as label1) = label1 ()
 val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 372.4 "mlpolyr.grm"*)label, (pat, exp), (BQleft, expright)(*#line 1620.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 36, ( result, BQ1left, exp1right), rest671)
end
|  ( 113, ( ( _, ( MlyValue.mr mr1, mr1left, mr1right)) :: rest671)) => let val  result = MlyValue.mrlist (fn _ => let val  (mr as mr1) = mr1 ()
 in ((*#line 375.4 "mlpolyr.grm"*)[mr](*#line 1628.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 37, ( result, mr1left, mr1right), rest671)
end
|  ( 114, ( ( _, ( MlyValue.mrlist mrlist1, _, mrlist1right)) :: _ :: ( _, ( MlyValue.mr mr1, mr1left, _)) :: rest671)) => let val  result = MlyValue.mrlist (fn _ => let val  (mr as mr1) = mr1 ()
 val  (mrlist as mrlist1) = mrlist1 ()
 in ((*#line 377.4 "mlpolyr.grm"*)mr :: mrlist(*#line 1634.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 37, ( result, mr1left, mrlist1right), rest671)
end
|  ( 115, ( rest671)) => let val  result = MlyValue.rehandling (fn _ => ((*#line 380.4 "mlpolyr.grm"*)[](*#line 1641.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 39, ( result, defaultPos, defaultPos), rest671)
end
|  ( 116, ( ( _, ( MlyValue.mrlist mrlist1, _, mrlist1right)) :: ( _, ( _, KW_rehandling1left, _)) :: rest671)) => let val  result = MlyValue.rehandling (fn _ => let val  (mrlist as mrlist1) = mrlist1 ()
 in ((*#line 382.4 "mlpolyr.grm"*)mrlist(*#line 1645.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 39, ( result, KW_rehandling1left, mrlist1right), rest671)
end
|  ( 117, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( MlyValue.pat pat1, pat1left, _)) :: rest671)) => let val  result = MlyValue.handling (fn _ => let val  (pat as pat1) = pat1 ()
 val  (exp as exp1) = exp1 ()
 in ((*#line 385.4 "mlpolyr.grm"*)[], SOME (pat, exp)(*#line 1651.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 40, ( result, pat1left, exp1right), rest671)
end
|  ( 118, ( ( _, ( MlyValue.mr mr1, mr1left, mr1right)) :: rest671)) => let val  result = MlyValue.handling (fn _ => let val  (mr as mr1) = mr1 ()
 in ((*#line 387.4 "mlpolyr.grm"*)[mr], NONE(*#line 1658.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 40, ( result, mr1left, mr1right), rest671)
end
|  ( 119, ( ( _, ( MlyValue.handling handling1, _, handling1right)) :: _ :: ( _, ( MlyValue.mr mr1, mr1left, _)) :: rest671)) => let val  result = MlyValue.handling (fn _ => let val  (mr as mr1) = mr1 ()
 val  (handling as handling1) = handling1 ()
 in ((*#line 389.4 "mlpolyr.grm"*)mr :: #1 handling, #2 handling(*#line 1664.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 40, ( result, mr1left, handling1right), rest671)
end
|  ( 120, ( ( _, ( MlyValue.rehandling rehandling1, rehandling1left, rehandling1right)) :: rest671)) => let val  result = MlyValue.handlers (fn _ => let val  (rehandling as rehandling1) = rehandling1 ()
 in ((*#line 392.4 "mlpolyr.grm"*)[], NONE, rehandling(*#line 1671.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 38, ( result, rehandling1left, rehandling1right), rest671)
end
|  ( 121, ( ( _, ( MlyValue.rehandling rehandling1, _, rehandling1right)) :: ( _, ( MlyValue.handling handling1, _, _)) :: ( _, ( _, KW_handling1left, _)) :: rest671)) => let val  result = MlyValue.handlers (fn _ => let val  (handling as handling1) = handling1 ()
 val  (rehandling as rehandling1) = rehandling1 ()
 in ((*#line 394.4 "mlpolyr.grm"*)#1 handling, #2 handling, rehandling(*#line 1677.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 38, ( result, KW_handling1left, rehandling1right), rest671)
end
|  ( 122, ( rest671)) => let val  result = MlyValue.defaultmatch (fn _ => ((*#line 397.4 "mlpolyr.grm"*)NONE(*#line 1684.1 "mlpolyr.grm.sml"*)
))
 in ( LrTable.NT 41, ( result, defaultPos, defaultPos), rest671)
end
|  ( 123, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( _, KW_default1left, _)) :: rest671)) => let val  result = MlyValue.defaultmatch (fn _ => let val  (exp as exp1) = exp1 ()
 in ((*#line 399.4 "mlpolyr.grm"*)SOME exp(*#line 1688.1 "mlpolyr.grm.sml"*)
)
end)
 in ( LrTable.NT 41, ( result, KW_default1left, exp1right), rest671)
end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.program x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : MLPolyR_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun NAME (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(ParserData.MlyValue.NAME (fn () => i),p1,p2))
fun NUMBER (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(ParserData.MlyValue.NUMBER (fn () => i),p1,p2))
fun SMALLNUM (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(ParserData.MlyValue.SMALLNUM (fn () => i),p1,p2))
fun STRING (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(ParserData.MlyValue.STRING (fn () => i),p1,p2))
fun KW_andalso (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(ParserData.MlyValue.VOID,p1,p2))
fun KW_orelse (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(ParserData.MlyValue.VOID,p1,p2))
fun KW_if (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(ParserData.MlyValue.VOID,p1,p2))
fun KW_then (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(ParserData.MlyValue.VOID,p1,p2))
fun KW_else (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(ParserData.MlyValue.VOID,p1,p2))
fun KW_false (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(ParserData.MlyValue.VOID,p1,p2))
fun KW_true (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(ParserData.MlyValue.VOID,p1,p2))
fun KW_let (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(ParserData.MlyValue.VOID,p1,p2))
fun KW_in (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(ParserData.MlyValue.VOID,p1,p2))
fun KW_end (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(ParserData.MlyValue.VOID,p1,p2))
fun KW_fun (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(ParserData.MlyValue.VOID,p1,p2))
fun KW_and (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(ParserData.MlyValue.VOID,p1,p2))
fun KW_val (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(ParserData.MlyValue.VOID,p1,p2))
fun KW_fn (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(ParserData.MlyValue.VOID,p1,p2))
fun KW_match (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(ParserData.MlyValue.VOID,p1,p2))
fun KW_with (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(ParserData.MlyValue.VOID,p1,p2))
fun KW_cases (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(ParserData.MlyValue.VOID,p1,p2))
fun KW_default (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(ParserData.MlyValue.VOID,p1,p2))
fun KW_nocases (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(ParserData.MlyValue.VOID,p1,p2))
fun KW_as (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(ParserData.MlyValue.VOID,p1,p2))
fun KW_where (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(ParserData.MlyValue.VOID,p1,p2))
fun KW_case (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(ParserData.MlyValue.VOID,p1,p2))
fun KW_of (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(ParserData.MlyValue.VOID,p1,p2))
fun KW_try (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(ParserData.MlyValue.VOID,p1,p2))
fun KW_handling (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(ParserData.MlyValue.VOID,p1,p2))
fun KW_rehandling (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(ParserData.MlyValue.VOID,p1,p2))
fun KW_raise (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(ParserData.MlyValue.VOID,p1,p2))
fun KW_isnull (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(ParserData.MlyValue.VOID,p1,p2))
fun KW_not (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(ParserData.MlyValue.VOID,p1,p2))
fun LP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(ParserData.MlyValue.VOID,p1,p2))
fun RP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(ParserData.MlyValue.VOID,p1,p2))
fun LCB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(ParserData.MlyValue.VOID,p1,p2))
fun RCB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(ParserData.MlyValue.VOID,p1,p2))
fun LCBB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(ParserData.MlyValue.VOID,p1,p2))
fun RCBB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(ParserData.MlyValue.VOID,p1,p2))
fun LSB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(ParserData.MlyValue.VOID,p1,p2))
fun RSB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(ParserData.MlyValue.VOID,p1,p2))
fun DEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(ParserData.MlyValue.VOID,p1,p2))
fun LTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(ParserData.MlyValue.VOID,p1,p2))
fun LT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(ParserData.MlyValue.VOID,p1,p2))
fun GTEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(ParserData.MlyValue.VOID,p1,p2))
fun GT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(ParserData.MlyValue.VOID,p1,p2))
fun NEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(ParserData.MlyValue.VOID,p1,p2))
fun DCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(ParserData.MlyValue.VOID,p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(ParserData.MlyValue.VOID,p1,p2))
fun MINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(ParserData.MlyValue.VOID,p1,p2))
fun DIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(ParserData.MlyValue.VOID,p1,p2))
fun MOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(ParserData.MlyValue.VOID,p1,p2))
fun EQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(ParserData.MlyValue.VOID,p1,p2))
fun DOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(ParserData.MlyValue.VOID,p1,p2))
fun EXCLAM (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(ParserData.MlyValue.VOID,p1,p2))
fun ASSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(ParserData.MlyValue.VOID,p1,p2))
fun BAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(ParserData.MlyValue.VOID,p1,p2))
fun COLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(ParserData.MlyValue.VOID,p1,p2))
fun WILD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(ParserData.MlyValue.VOID,p1,p2))
fun DOTDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(ParserData.MlyValue.VOID,p1,p2))
fun BQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(ParserData.MlyValue.VOID,p1,p2))
fun PLUSPLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(ParserData.MlyValue.VOID,p1,p2))
end
end
