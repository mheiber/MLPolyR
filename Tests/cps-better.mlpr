let val n = { i := 1000 }
    fun withfresh f = let val i = n!i in n!i := i+1; f i end

    (* ---- utilities ---- *)

    fun Let (x, e1, e2) = `App (`Lam ([x], e2), [e1])
    fun kv2kb kv = fn v => `App (kv, [v])
    fun kb2kv kb = withfresh (fn rx => `Lam ([rx], kb (`Var rx)))

    fun cvt_app (cvt, e, el, kv) =
	let fun lc (el, kb) =
		case el of [] => kb []
			 | e :: el => pc (e, el, fn (v, vl) => kb (v :: vl))
	    and pc (e, el, kb) = cvt (e, fn v => lc (el, fn vl => kb (v, vl)))
	in pc (e, el, fn (v, vl) => `App (v, kv :: vl))
	end

    fun cvt_lam (cvt, xl, e) =
	withfresh (fn xk => `Lam (xk :: xl, cvt (e, kv2kb (`Var xk))))

    fun cvt_c (cvt, kb) =
	cases `Const i => kb (`Const i)
            | `Var x => kb (`Var x)
	    | `Lam (xl, e) => kb (cvt_lam (cvt, xl, e))
	    | `App (e, el) => cvt_app (cvt, e, el, kb2kv kb)

    fun mkConvert (c, e) =
	let fun cvt (e, kb) = match e with c (cvt, kb)
	in cvt_lam (cvt, [], e)
	end

    fun convert e = mkConvert (cvt_c, e)

    fun cvt_if_c other (cvt, kb) =
	cases `If (e1, e2, e3) =>
          withfresh (fn xk =>
	    Let (xk, kb2kv kb, cvt (e1, fn v1 =>
              let val kb' = kv2kb (`Var xk)
              in `If (v1, cvt (e2, kb'), cvt (e3, kb'))
	      end)))
        default: other (cvt, kb)

    fun cvt_lcc_c other (cvt, kb) =
	cases `LetCC (x, e) => (*...*)233
        default: other (cvt, kb)

    fun convert_if e = mkConvert (cvt_if_c cvt_c, e)


in 0
end
